{"ast":null,"code":"import _classCallCheck from\"/Users/killawa/Documents/github/virtual-escape-room/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Users/killawa/Documents/github/virtual-escape-room/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";import _inherits from\"/Users/killawa/Documents/github/virtual-escape-room/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";import _createSuper from\"/Users/killawa/Documents/github/virtual-escape-room/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";import React,{Component}from'react';import{Accordion,Card,Button}from'react-bootstrap';import emails from\"./data/emails.json\";import\"./css/polygraph.css\";import Hint from\"./hints\";var Polygraph=/*#__PURE__*/function(_Component){_inherits(Polygraph,_Component);var _super=_createSuper(Polygraph);function Polygraph(){var _this;_classCallCheck(this,Polygraph);for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}_this=_super.call.apply(_super,[this].concat(args));_this.renderWeb=function(previous){var email=Object.assign({},previous);var closing=email.closer.map(function(elem){return/*#__PURE__*/React.createElement(\"p\",null,\" \",elem,\" \");});var paras=email.paragraphs.map(function(para){return/*#__PURE__*/React.createElement(\"p\",null,\" \",para,\" \");});return/*#__PURE__*/React.createElement(Card,null,/*#__PURE__*/React.createElement(Card.Header,{className:\"emailhead\"},/*#__PURE__*/React.createElement(Accordion.Toggle,{as:Button,className:\"emailtitle\",variant:\"link\",eventKey:email.number},\" SUBJECT: \",email.title)),/*#__PURE__*/React.createElement(Accordion.Collapse,{eventKey:email.number},/*#__PURE__*/React.createElement(Card.Body,null,/*#__PURE__*/React.createElement(\"div\",{class:\"email\"},/*#__PURE__*/React.createElement(\"h5\",null,\" From: \",email.from,\" \"),/*#__PURE__*/React.createElement(\"h5\",null,\" To: \",email.to,\" \"),paras,/*#__PURE__*/React.createElement(\"div\",{class:\"closing\"},closing)))));};return _this;}_createClass(Polygraph,[{key:\"render\",value:function render(){var _this2=this;var email_web=emails.map(function(email){return _this2.renderWeb(email);});if(this.props.active){var hinters=[{num:\"0\",title:\"Hint 1\",body:\"Check for inconstencies! \"},{num:\"1\",title:\"Final Hint 2\",body:\"Check for inconstencies in the alibi against emails! \"}].slice(0,this.props.vals.hints);var hints=/*#__PURE__*/React.createElement(Hint,{values:hinters,num:this.props.hints,click:function click(){_this2.props.change(\"emails\",\"hints\",_this2.props.vals.hints+1);_this2.props.change(\"hints\",\"hints\",_this2.props.hints-1);}});return/*#__PURE__*/React.createElement(\"div\",{class:\"largest\"},/*#__PURE__*/React.createElement(\"div\",{class:\"inbox\"},/*#__PURE__*/React.createElement(Accordion,{defaultActiveKey:\"1\"},/*#__PURE__*/React.createElement(Card,null,/*#__PURE__*/React.createElement(Card.Header,{style:{backgroundColor:\"white\",borderStyle:\"solid\",borderColor:\"black\",borderWidth:\"3px\"}},/*#__PURE__*/React.createElement(\"h2\",{style:{color:\"rgb(85, 7, 7)\"}},\" Steve's Inbox \"))),email_web)),hints);}else{return/*#__PURE__*/React.createElement(\"div\",{class:\"reject\"},/*#__PURE__*/React.createElement(\"h3\",null,\" You must first pass the earlier stages! \"));}}}]);return Polygraph;}(Component);export default Polygraph;","map":{"version":3,"sources":["/Users/killawa/Documents/github/virtual-escape-room/src/components/polygraph.js"],"names":["React","Component","Accordion","Card","Button","emails","Hint","Polygraph","renderWeb","previous","email","Object","assign","closing","closer","map","elem","paras","paragraphs","para","number","title","from","to","email_web","props","active","hinters","num","body","slice","vals","hints","change","backgroundColor","borderStyle","borderColor","borderWidth","color"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport {Accordion, Card, Button} from 'react-bootstrap';\nimport emails from \"./data/emails.json\";\nimport \"./css/polygraph.css\";\nimport Hint from \"./hints\";\n\nclass Polygraph extends Component { \n    \n    renderWeb = (previous) => { \n        var email = Object.assign({}, previous);\n        const closing = email.closer.map(elem => <p> {elem} </p> );\n        const paras = email.paragraphs.map(para => <p> {para} </p>);\n        return (\n            <Card>\n                <Card.Header className = \"emailhead\" >\n                    <Accordion.Toggle as={Button} className = \"emailtitle\" variant=\"link\" eventKey= {email.number}> SUBJECT: {email.title}</Accordion.Toggle>\n                </Card.Header>\n                <Accordion.Collapse eventKey={email.number}>\n                    <Card.Body> \n                        <div class = \"email\">\n                            <h5> From: {email.from} </h5> \n                            <h5> To: {email.to} </h5>\n\n                            {paras}\n\n                            <div class = \"closing\">\n                                {closing}\n                            </div>\n                        </div>\n                    </Card.Body>\n                </Accordion.Collapse>\n            </Card>\n        )\n    }\n    render() {\n        const email_web = emails.map(email => this.renderWeb(email));\n        if (this.props.active) {\n            const hinters = [\n                {\n                    num: \"0\", \n                    title: \"Hint 1\", \n                    body: \"Check for inconstencies! \"}, \n                {\n                    num: \"1\", \n                    title: \"Final Hint 2\", \n                    body: \"Check for inconstencies in the alibi against emails! \"}, \n                \n            ].slice(0, this.props.vals.hints)\n            const hints = <Hint\n                values = {hinters}\n                num = {this.props.hints}\n                click = {() => {this.props.change(\"emails\", \"hints\", this.props.vals.hints + 1); this.props.change(\"hints\", \"hints\", this.props.hints - 1)}}\n            />  \n            return ( \n                <div class = \"largest\">\n                    <div class = \"inbox\"> \n                <Accordion defaultActiveKey=\"1\">\n                    <Card> \n                        <Card.Header style = {{backgroundColor: \"white\", borderStyle: \"solid\", borderColor: \"black\", borderWidth: \"3px\"}}>\n                            <h2 style = {{color: \"rgb(85, 7, 7)\"}}> Steve's Inbox </h2> \n                        </Card.Header>\n                    </Card> \n                    {email_web}\n                </Accordion>\n                </div> \n                    {hints}\n                </div>\n            )\n        } else { \n            return ( \n                <div class = \"reject\"> \n                        <h3> You must first pass the earlier stages! </h3>\n                </div> \n            )\n        }\n\n        \n    }\n\n}\nexport default Polygraph;\n\n"]},"metadata":{},"sourceType":"module"}